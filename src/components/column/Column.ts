import { Creator, RootElementConnector } from "../../common/common.types";
import LeaderboardHeader from "../headers/Header";
import Header from "../headers/Header";
import ElementCreator from "../../factories/ElementCreator";
import Row from "../row/Row";

export interface LeaderboardData {
   /*
    * @type {header} is generated by default by leaderboard
    */
   header: string;

   /*
    * @type {content} will be used for generic leaderboards
    */
   content: string | string[];
   place: number;
   points: number;
}

type RowProperties = {
   place?: number;
   points?: number;
} & unknown;

interface ColumnProperties extends RowProperties {
   header: string;
   rows: unknown[];
}

type RawColumnProperties = any;

class Column implements RootElementConnector, Creator {
   root: HTMLElement;
   _elementCreator: ElementCreator;

   constructor(root: HTMLElement, private _lbData: any) {
      this.root = root;
      this._elementCreator = new ElementCreator();
   }

   public render(): any {
      return this._createColumn();
   }

   private _createColumn() {
      const columnsData = this._lbData.reduce(
         (
            headersAccumulator: ColumnProperties[],
            preParsedElement: RawColumnProperties
         ) => {
            if (!preParsedElement || !headersAccumulator) return;
            const preParsedHeaders = Object.keys(preParsedElement);
            if (!preParsedHeaders) return;

            preParsedHeaders.forEach((header) => {
               // eslint-disable-next-line no-prototype-builtins
               if (preParsedElement.hasOwnProperty(header)) {
                  const singleRowForHeader: RowProperties = preParsedElement[header];
                  const isHeaderAlreadyExistsInAcc: boolean = headersAccumulator.some(
                     (el: { header: string }) => el.header === header
                  );

                  /**
                   * @const isHeaderAlreadyExistsInAcc if header already exists in array of accumulator
                   */
                  if (isHeaderAlreadyExistsInAcc) {
                     return this._appendNewRowToExistingHeader(
                        headersAccumulator,
                        header,
                        singleRowForHeader
                     );
                  } else {
                     headersAccumulator.push({ header, rows: [singleRowForHeader] });
                  }
               }
            });
            return headersAccumulator;
         },
         []
      );
   }

   private _appendNewRowToExistingHeader(
      array: ColumnProperties[],
      iterator: string,
      rowsToAppend: RowProperties
   ) {
      const headerIndexInAcc = array.findIndex((el: { [x: string]: any }) => {
         return el.header === iterator;
      });
      const existingHeaderInAcc = array[headerIndexInAcc];
      return existingHeaderInAcc.rows.push(rowsToAppend);
   }

   private _instantiateHeader(txt: string): Header {
      return new LeaderboardHeader(this.root, txt);
   }

   private _instantiateRow(): Row {
      return new Row(this.root, this._lbData);
   }
}

export default Column;
